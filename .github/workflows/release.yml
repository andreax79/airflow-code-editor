name: Releases

on:
  push:
    tags:
      - v*

jobs:

  wait:
    name: Wait for tests
    runs-on: ubuntu-latest

    steps:
      - uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-tests
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Tests done
          ref: ${{ github.sha }}
          timeoutSeconds: 3600

      - name: Fail the Build
        uses: cutenode/action-always-fail@v1
        if: steps.wait-for-tests.outputs.conclusion != 'success'

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: [wait]

    strategy:
      matrix:
        python-version:
        - "3.12"
        airflow:
        - "2.10.0"

    env:
      AIRFLOW_HOME: ./scripts/airflow

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python }}-pip-${{ hashFiles('**/requirements*.txt') }}-git-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python }}-pip-${{ hashFiles('**/requirements*.txt') }}
            ${{ runner.os }}-python-${{ matrix.python }}-pip-
            ${{ runner.os }}-python
            ${{ runner.os }}-

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel

      - name: Prepare environment
        env:
          AIRFLOW_VERSION: ${{ matrix.airflow }}
        run: |
          bash ./scripts/prepare.sh
          pip freeze

      - name: Build package
        run:  python setup.py bdist_wheel sdist

      - name: Check package
        run:  twine check dist/*

      - name: Publish package
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload --skip-existing dist/*

  release:
    name: Release version
    runs-on: ubuntu-latest
    needs: [wait, build]

    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
